//
// Copyright (c) 2022 Liqid, Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are not permitted without prior consent.
//

package com.liqid.sdk.generator.catalog;

import com.liqid.sdk.generator.discreteDataModels.EnumeratorDataDescriptor;
import com.liqid.sdk.generator.discreteDataModels.IntrinsicDataDescriptor;
import com.liqid.sdk.generator.discreteDataModels.IntrinsicTypeId;
import com.liqid.sdk.generator.discreteDataModels.StructDataDescriptor;
import com.liqid.sdk.generator.liqidEntityModels.*;
import com.liqid.sdk.generator.liqidEntityModels.structs.Struct;
import com.liqid.sdk.generator.liqidEntityModels.structs.StructDataMember;
import com.liqid.sdk.generator.liqidEntityModels.structs.StructFunctionMember;
import com.liqid.sdk.generator.writers.LanguageId;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A static class which describes all the Liqid structs.
 * Adding a struct requires the following steps:
 *      Add a corresponding StructId to StructId.java
 *      Add a private static Struct here, describing the struct
 *      Add an entry to CONTENT below
 */
class Structs {

    //  Client structs

    private static final Struct LiqidClientBase =
        new Struct.Builder()
            .setStructId(StructId.LIQID_CLIENT_BASE)
            .setBaseName("LiqidClientBase")
            .addDescription("Base class/struct for LiqidClient")
            .addMember(new StructDataMember.Builder()
                .setBaseName("SecureHTTP")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                .addDescription("true for secure HTTP (HTTPS) communication with REST API, else false for HTTP")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("HostAddress")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                .addDescription("DNS name or dotted-decimal IP address of Liqid Director")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("PortNumber")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                .addDescription("port number of REST API for Liqid Director")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("IgnoreCertificates")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                .addDescription("true to ignore certificate issues detected with HTTPS communication with the Liqid Director")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("TimeoutInSeconds")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                .addDescription("default timeout value for REST API invocations")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("RetryOnServerError")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                .addDescription("Causes the client to retry requests which fail with 5xx response codes")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("RetryLimit")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                .addDescription("Number of times to retry requests failing with 5xx response codes")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("RetryDelayInSeconds")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                .addDescription("Number of seconds to wait between retries for requests failing with 5xx response codes")
                .build())
            .addMember(new StructDataMember.Builder()
                .setBaseName("WaitForAsyncCompletion")
                .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                .addDescription("Causes the client to wait for completion of tasks which return a 2020 response code")
                .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("MaxAsyncWaitTimeInSeconds")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .addDescription("Maximum time to wait for async completion in seconds")
                           .build())
            .setIsBuildable(false)
            .setIsHardCoded(true)
            .build();

    private static final Struct LiqidClient =
        new Struct.Builder()
            .setStructId(StructId.LIQID_CLIENT)
            .setBaseName("LiqidClient")
            .addDescription("This struct is necessary for managing all communication with the Liqid Director.")
            .addDescription("For OO languages, it serves as the class on which all methods are defined.")
            .addDescription("For non-OO languages, it is a required parameter for all function invocations.")
            .addImportRequirement(LanguageId.JAVA, "com.fasterxml.jackson.databind.ObjectMapper")
            .setBaseStructId(StructId.LIQID_CLIENT_BASE)
            .setIsSerializable(false)
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_COMPUTE_DEVICE_TO_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_COMPUTE_DEVICE_TO_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_DEVICE_TO_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_DEVICE_TO_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_FPGA_DEVICE_TO_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_FPGA_DEVICE_TO_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_GPU_DEVICE_TO_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_GPU_DEVICE_TO_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_MEMORY_DEVICE_TO_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_MEMORY_DEVICE_TO_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_NETWORK_DEVICE_TO_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_NETWORK_DEVICE_TO_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_STORAGE_DEVICE_TO_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.ADD_STORAGE_DEVICE_TO_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.APPLY_FABRIC_CHANGES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.BACKUP_DIRECTOR).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CANCEL_EDIT_FABRIC).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CANCEL_GROUP_POOL_EDIT).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CANCEL_REPROGRAM_FABRIC).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CLEAR_CREDENTIALS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CLEAR_GROUPS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CREATE_DEVICE_DESCRIPTION).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CREATE_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CREATE_GROUP_WITH_ID).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CREATE_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CREATE_MACHINE_WITH_ID).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.CREATE_MESSAGE_DIGEST).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.DELETE_DEVICE_DESCRIPTION).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.DELETE_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.DELETE_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.DELETE_MESSAGE_DIGEST).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.EDIT_FABRIC).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_ALL_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_AVAILABLE_COORDINATES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_COMPUTE_DEVICE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_COMPUTE_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_COMPUTE_DEVICES_WITH_MULTIPLE_PORTS_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_COMPUTE_DEVICE_INFO).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_COMPUTE_DEVICE_INFO_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_CURRENT_FABRIC_ID).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_DEFAULT_COORDINATES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_DEVICES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_DEVICE_ATTRIBUTES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_DEVICE_COUNTERS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_DEVICE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_DISCOVERY_TOKENS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_DISCOVERY_TOKENS_BY_TYPE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FABRIC_TOPOLOGY).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FABRIC_TYPES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FPGA_DEVICE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FPGA_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FPGA_DEVICE_INFO).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FPGA_DEVICE_INFO_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FREE_COMPUTE_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FREE_FPGA_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FREE_GPU_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FREE_MEMORY_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FREE_NETWORK_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_FREE_STORAGE_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GPU_DEVICE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GPU_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GPU_DEVICE_INFO).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GPU_DEVICE_INFO_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUPS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_COMPUTE_DEVICE_RELATOR).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_FPGA_DEVICE_RELATOR).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_GPU_DEVICE_RELATOR).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_MEMORY_DEVICE_RELATOR).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_NETWORK_DEVICE_RELATOR).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_STORAGE_DEVICE_RELATOR).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_DETAILS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_GROUP_ID_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MACHINES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MACHINES_AT_COORDINATES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MACHINES_BY_GROUP_ID).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MACHINE_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MACHINE_DETAILS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MANAGED_ENTITIES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MANAGED_ENTITY).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MEMORY_DEVICE_INFO).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MEMORY_DEVICE_INFO_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MEMORY_DEVICE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MEMORY_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_MESSAGE_DIGEST_LABELS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_DEVICE_INFO).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_DEVICE_INFO_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_DEVICE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_IPMI_MANAGED_CPU).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_IPMI_MANAGED_CPUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_IPMI_MANAGED_ENCLOSURE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NETWORK_IPMI_MANAGED_ENCLOSURES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NEXT_GROUP_ID).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NEXT_MACHINE_ID).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_NODES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_SECURE_ERASE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_SSH_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_STORAGE_DEVICE_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_STORAGE_DEVICES_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_STORAGE_DEVICE_INFO).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_STORAGE_DEVICE_INFO_BY_NAME).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_UNATTACHED_DEVICES_FOR_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GET_VERSIONS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GROUP_POOL_DONE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.GROUP_POOL_EDIT).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.HAS_CREDENTIALS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.INITIALIZE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.IS_LOGGED_IN).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.LOGIN).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.LOGOUT).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REBOOT_NODE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_COMPUTE_DEVICE_FROM_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_COMPUTE_DEVICE_FROM_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_DEVICE_FROM_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_DEVICE_FROM_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_FPGA_DEVICE_FROM_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_FPGA_DEVICE_FROM_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_GPU_DEVICE_FROM_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_GPU_DEVICE_FROM_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_MEMORY_DEVICE_FROM_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_MEMORY_DEVICE_FROM_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_NETWORK_DEVICE_FROM_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_NETWORK_DEVICE_FROM_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_STORAGE_DEVICE_FROM_GROUP).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REMOVE_STORAGE_DEVICE_FROM_MACHINE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.REPROGRAM_FABRIC).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.RESET_STATE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.RESTART_FABRIC).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.RESTART_HIERARCHY).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.RESTART_NODE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.RESTART_SWITCH).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SECURE_ERASE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SET_CREDENTIALS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SET_DEFAULT_COORDINATES).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SET_LOGGING).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SET_SSH_STATUS).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SHUTDOWN).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SHUTDOWN_AT).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SHUTDOWN_NODE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.START_NODE).build())
            .addMember(new StructFunctionMember.Builder().setFunctionId(FunctionId.SET_P2P_ENABLED).build())
            .setIsBuildable(false)
            .build();

    private static final Struct LiqidException =
        new Struct.Builder()
            .setStructId(StructId.LIQID_EXCEPTION)
            .setBaseName("LiqidException")
            .addDescription("This is exception is thrown by most SDK methods to signify an unrecoverable error.")
            .addDescription("In some cases this represents a temporal condition; i.e., a retry might succeed.")
            .addDescription("In other cases this might reflect a problem with the system configuration.")
            .addDescription("Finally, it could indicate a problem in the information presented to the SDK API.")
            .addDescription("Since this class extends java.util.Exception, all accessors which apply to that class also apply to this one.")
            .setIsBuildable(false)
            .setIsHardCoded(true)
            .setIsSerializable(false)
            .setSpecificLanguageId(LanguageId.JAVA)
            .build();

    //  All the other structs

    private static final Struct AsynchronousInfo =
        new Struct.Builder()
            .setStructId(StructId.ASYNCHRONOUS_INFO)
            .setBaseName("AsynchronousInfo")
            .addDescription("Reports an identifier of an asynchronous operation")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("AsynchronousId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("async_id")
                           .addDescription("Identifier to be used for polling the state of an asynchronous task")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("device_id")
                           .addDescription("Device identifier which is associated with the asynchronous task")
                           .build())
            .build();

    private static final Struct AsynchronousStatus =
        new Struct.Builder()
            .setStructId(StructId.ASYNCHRONOUS_STATUS)
            .setBaseName("AsynchronousStatus")
            .addDescription("Reports the status of an asynchronous operation")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ExecutionState")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("command_execution_state")
                           .addDescription("execution state of the asynchronous operation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("device_id")
                           .addDescription("Identifier of the device to which this operation applies")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ExecutionDateTime")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("execution_date")
                           .addDescription("Timestamp of when the process was initiated")
                           .build())
            .build();

    private static final Struct AvailableCoordinates =
        new Struct.Builder()
            .setStructId(StructId.AVAILABLE_COORDINATES)
            .setBaseName("AvailableCoordinates")
            .addDescription("A description of an available REST target including IP addressing information and Liqid Coordinates")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("IPAddress")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("address")
                           .addDescription("DNS name or dotted-decimal IP address of the REST target")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortNumber")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("port")    //  I like late-bottled vintage port
                           .addDescription("UDP port number of the REST target")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Coordinates")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("coordinates")
                           .addDescription("Liqid coordinates of the REST target")
                           .build())
            .build();

    private static final Struct BackupResult =
        new Struct.Builder()
            .setStructId(StructId.BACKUP_RESULT)
            .setBaseName("BackupResult")
            .addDescription("Backups up the Director configuration")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CommandLine")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("commandLine")
                           .addDescription("The command line used to perform the backup operation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("StandardOutput")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("standardOutput")
                           .addDescription("Content written to stdout during the backup operation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("StandardError")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("standardError")
                           .addDescription("Content written to stderr during the backup operation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ExitValue")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("exitValue")
                           .addDescription("Resulting value of the backup operation; zero indicates success")
                           .build())
            .build();

    private static final Struct ComputeDeviceInfo =
        new Struct.Builder()
            .setStructId(StructId.COMPUTE_DEVICE_INFO)
            .setBaseName("ComputeDeviceInfo")
            .setBaseStructId(StructId.DEVICE_INFO)
            .addDescription("Contains non-status information regarding a compute device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CoreCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("core_cnt")
                           .addDescription("Number of cores for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CoreMHz")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.FLOAT))
                           .setJsonTag("core_mhz")
                           .addDescription("Cycle rate for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMSize")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_size")
                           .addDescription("Dynamic RAM size")//TODO expressed in what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_type")
                           .addDescription("Dynamic RAM type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("InstructionSet")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("inst_set")
                           .addDescription("Instruction set of this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Socket")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("socket")
                           .addDescription("Socket description of this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("NumberOfThreads")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("thrd_cnt")
                           .addDescription("Number of threads supported by this device")
                           .build())
            .build();

    private static final Struct ComputeDeviceStatus =
        new Struct.Builder()
            .setStructId(StructId.COMPUTE_DEVICE_STATUS)
            .setBaseName("ComputeDeviceStatus")
            .setBaseStructId(StructId.DEVICE_STATUS)
            .addDescription("Compute Device Status Information")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("HConn")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("hconn")
                           .addDescription("Internal value")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Unique")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("unique")
                           .addDescription("Internal value")
                           .build())
            .build();

    private static final Struct ConnectionHistory =
        new Struct.Builder()
            .setStructId(StructId.CONNECTION_HISTORY)
            .setBaseName("ConnectionHistory")
            .addDescription("Describes one connection to a machine")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("AttachTime")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("atime")
                           .addDescription("Time which device was attached")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.PRE_DEVICE_TYPE))
                           .setJsonTag("dev_type")
                           .addDescription("Type of the connecting device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DetachTime")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("dtime")
                           .addDescription("Time which device was detached")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("fabr_gid")
                           .addDescription("Fabric global identifier")//TODO better description
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Free")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                           .setJsonTag("free")
                           .addDescription("")//TODO what is this?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("")//TODO what is this?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("OwnerGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("owner_gid")
                           .addDescription("Owner global identifier")//TODO better description
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("UserDescription")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("udesc")
                           .addDescription("User-specified description")
                           .build())
            .build();

    private static final Struct Coordinates =
        new Struct.Builder()
            .setStructId(StructId.COORDINATES)
            .setBaseName("Coordinates")
            .addDescription("Describes a unique Liqid coordinate.")
            .addDescription("Most of the members of this entity are obsolete.")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Rack")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("rack")
                           .setIsOptional(true)
                           .setDefaultValue(0)
                           .addDescription("Obsolete - should always be zero")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Shelf")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("shelf")
                           .setIsOptional(true)
                           .setDefaultValue(0)
                           .addDescription("Obsolete - should always be zero")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Node")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("node")
                           .addDescription("Describes the relative position of a particular coordinate-addressable Liqid entity.")
                           .build())
            .build();

    private static final Struct Credentials =
        new Struct.Builder()
            .setStructId(StructId.CREDENTIALS)
            .setBaseName("Credentials")
            .addDescription("Contains credentials necessary for managing some managed entity within the configuration (such as via IPMI)")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Principal")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("principal")
                           .addDescription("Also known as username, user-id, etc")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Password")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("password")
                           .addDescription("The password associated with the given principal")
                           .build())
            .build();

    private static final Struct DeviceCounters =
        new Struct.Builder()
            .setStructId(StructId.DEVICE_COUNTERS)
            .setBaseName("DeviceCounters")
            .addDescription("Counts of discovered devices by device type")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPUCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("comp_cnt")
                           .addDescription("Number of discovered compute devices")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FPGACount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fpga_cnt")
                           .addDescription("Number of discovered FPGA devices")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GPUCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("gpu_cnt")
                           .addDescription("Number of discovered GPU devices")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("LinkCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("link_cnt")
                           .addDescription("Number of discovered link (e.g., network) devices")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PLXCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("plx_cnt")
                           .addDescription("Number of discovered PLX devices")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TargetCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("targ_cnt")
                           .addDescription("Number of discovered target devices")
                           .build())
            .build();

    private static final Struct DeviceInfo =
        new Struct.Builder()
            .setStructId(StructId.DEVICE_INFO)
            .setBaseName("DeviceInfo")
            .addDescription("All information other than status, for a given device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BusGeneration")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("busgen")
                           .addDescription("Bus Generation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BusWidth")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("buswidth")
                           .addDescription("Bus Width")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceClass")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("class")
                           .addDescription("Device class")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ConnectionType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("conn_type")
                           .addDescription("Connection Type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceIdentifier")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("dev_id")
                           .addDescription("Device Identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceState")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("device_state")
                           .addDescription("Device State")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceInfoType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.DEVICE_TYPE))
                           .setJsonTag("device_type")
                           .addDescription("Device Type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("fabr_gid")
                           .addDescription("Fabric global identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.FABRIC_TYPE))
                           .setJsonTag("fabric_type")
                           .addDescription("Fabric Type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Family")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("family")
                           .addDescription("Family")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Flags")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64_AS_STRING))
                           .setJsonTag("flags")
                           .addDescription("Flags")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FirmwareRevision")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("fw_rev")
                           .addDescription("Device firmware revision")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Index")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("index")
                           .addDescription("Internal index of this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Location")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("location")
                           .addDescription("Liqid Coordinates for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Model")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("model")
                           .addDescription("Model of this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Device name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Owner")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("owner")
                           .addDescription("Liqid Coordinates of the device above this one in the hierarchy")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PartNumber")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("part_num")
                           .addDescription("Device name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIDeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("pci_device")
                           .addDescription("Vendor-unique device identifier expressed in hex as a '0x'-prefixed string")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIVendorId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("pci_vendor")
                           .addDescription("PCI Vendor identifier expressed in hex as a '0x'-prefixed string")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PodId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("pod_id")
                           .setIsOptional(true)
                           .setDefaultValue(-1)
                           .addDescription("Obsolete value - should always be -1")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SerialNumber")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("serial_num")
                           .addDescription("Device serial number")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SledId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("sled_id")
                           .addDescription("Obsolete")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("UserDescription")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("udesc")
                           .addDescription("User-supplied description")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Unique")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("unique")
                           .addDescription("Device-specific information")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Vendor")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("vendor")
                           .addDescription("Vendor name")
                           .build())
            .build();

    private static final Struct DeviceStatus =
        new Struct.Builder()
            .setStructId(StructId.DEVICE_STATUS)
            .setBaseName("DeviceStatus")
            .addDescription("Status of a manageable device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ConnectionType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("conn_type")
                           .addDescription("Connection type for the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("dev_id")
                           .addDescription("Unique identifier for the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceState")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("device_state")
                           .addDescription("State of this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.DEVICE_TYPE))
                           .setJsonTag("device_type")
                           .addDescription("Device type for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIDeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("did")
                           .addDescription("PCI Vendor-Unique Device identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("fabr_gid")
                           .addDescription("Fabric global identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fabr_id")
                           .addDescription("Fabric identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("fabric_type")
                           .addDescription("Fabric type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Flags")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64_AS_STRING))
                           .setJsonTag("flags")
                           .addDescription("Hardware flags as a 64-bit bitmask")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Flags2")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("flags2")
                           .addDescription("Additional hardware flags displayed as a hex string prefixed by 'ox'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Index")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("index")
                           .addDescription("Internal index of this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCILaneCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("lanes")
                           .addDescription("Number of PCI lanes for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Location")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("location")
                           .addDescription("Liqid coordinates for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Name of this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Owner")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("owner")
                           .addDescription("Liqid coordinates for the component directly above this in the containing fabric topology")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PodId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("pod_id")
                           .addDescription("Pod identifier - obsolete value which is generally always -1")
                           .setIsOptional(true)
                           .setDefaultValue(-1)
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT24_AS_STRING))
                           .setJsonTag("port_gid")
                           .addDescription("Port Global Identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SledId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("sled_id")
                           .addDescription("Obsolete value")
                           .setIsOptional(true)
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SwitchGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT24_AS_STRING))
                           .setJsonTag("swit_gid")
                           .addDescription("Switch Global Identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceStatusType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("type")
                           .addDescription("Type of DeviceStatus entity")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIVendorId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("vid")
                           .addDescription("Unique PCI Vendor Identifier")
                           .build())
            .build();

    private static final Struct DeviceTypeAndAttributes =
        new Struct.Builder()
            .setStructId(StructId.DEVICE_TYPE_AND_ATTRIBUTES)
            .setBaseName("DeviceTypeAndAttributes")
            .addDescription("Describes the various attributes for a particular device type")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.DEVICE_TYPE))
                           .setJsonTag("deviceType")
                           .addDescription("A particular data type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Attributes")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING_ARRAY_MAP))
                           .setJsonTag("attributes")
                           .addDescription("Array of string descriptors")
                           .build())
            .addImportRequirement(LanguageId.JAVA, "java.util.HashMap")
            .build();

    private static final Struct DeviceUserDescription =
        new Struct.Builder()
            .setStructId(StructId.DEVICE_USER_DESCRIPTION)
            .setBaseName("DeviceUserDescription")
            .addDescription("Wraps a user-provided description for a particular device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("UserDescription")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("udesc")
                           .addDescription("The actual description")
                           .build())
            .build();

    private static final Struct DigestInfo =
        new Struct.Builder()
            .setStructId(StructId.DIGEST_INFO)
            .setBaseName("DigestInfo")
            .addDescription("Describes information related to a newly-created digest message")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DigestId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("digest_id")
                           .addDescription("A unique (internal) identifier for this digest message")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DigestKey")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("digest_key")
                           .addDescription("The digest key generated by the director to be associated with the given label")
                           .addDescription("This is the value which should be used for authenticating subsequent REST API invocations.")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DigestLabel")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("digest_label")
                           .addDescription("The digest label which is associated with the generated digest key.")
                           .addDescription("This value should be used for deleting the digest message at the end of a client REST session.")
                           .build())
            .build();

    private static final Struct DiscoveryToken =
        new Struct.Builder()
            .setStructId(StructId.DISCOVERY_TOKEN)
            .setBaseName("DiscoveryToken")
            .addDescription("Describes a single discovery token")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Token")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("discovery_token")
                           .addDescription("The actual token")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Index")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("index")
                           .addDescription("Internal index value for the token")
                           .build())
            .build();

    private static final Struct FabricItem =
        new Struct.Builder()
            .setStructId(StructId.FABRIC_ITEM)
            .setBaseName("FabricItem")
            .addDescription("Describes a Liqid entity, the aggregate of which comprises the fabric.")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Name associated with this entity.")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Id")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("id")
                           .addDescription("Node identifier of this entity.")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ParentId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("parentId")
                           .addDescription("Node identifier of the entity directly above this node in the fabric hierarchy.")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.DEVICE_TYPE))
                           .setJsonTag("deviceType")
                           .addDescription("Describes the particular type of this device.")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("HardwareComponent")
                           .setDataDescriptor(new StructDataDescriptor(StructId.HARDWARE_COMPONENT))
                           .setJsonTag("hardwareComponent")
                           .addDescription("Describes the hardware characteristics of this device.")
                           .build())
            .build();

    private static final Struct FabricToggleComposite =
        new Struct.Builder()
            .setStructId(StructId.FABRIC_TOGGLE_COMPOSITE)
            .setBaseName("FabricToggleComposite")
            .addDescription("Describes the result of a fabric change operation")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Coordinates")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("coordinates")
                           .addDescription("Describes the LIQID coordinates of the director for the updated fabric")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ControlFlag")
                           .setDataDescriptor(new StructDataDescriptor(StructId.NAME_VALUE_PAIR))
                           .setJsonTag("flag")
                           .addDescription("Describes the value added to the fabric")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Options")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.FABRIC_TOGGLE_COMPOSITE_OPTION))
                           .setJsonTag("options")
                           .addDescription("Describes the operation which was requested")
                           .build())
            .build();

    private static final Struct FPGADeviceInfo =
        new Struct.Builder()
            .setStructId(StructId.FPGA_DEVICE_INFO)
            .setBaseName("FPGADeviceInfo")
            .setBaseStructId(StructId.DEVICE_INFO)
            .addDescription("Contains non-status information regarding an FPGA device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CoreCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("core_cnt")
                           .addDescription("Number of cores for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CoreMHz")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.FLOAT))
                           .setJsonTag("core_mhz")
                           .addDescription("Cycle rate for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMSize")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_size")
                           .addDescription("Dynamic RAM size")//TODO expressed in what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_type")
                           .addDescription("Dynamic RAM type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FPGASpeed")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("fpga_speed")
                           .addDescription("Speed for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("NumberOfThreads")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("thrd_cnt")
                           .addDescription("Number of threads supported by this device")
                           .build())
            .build();

    private static final Struct FPGADeviceStatus =
        new Struct.Builder()
            .setStructId(StructId.FPGA_DEVICE_STATUS)
            .setBaseName("FPGADeviceStatus")
            .setBaseStructId(StructId.DEVICE_STATUS)
            .addDescription("FPGA Device Status Information")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Unique")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("unique")
                           .addDescription("Internal value")
                           .build())
            .build();

    private static final Struct GPUDeviceInfo =
        new Struct.Builder()
            .setStructId(StructId.GPU_DEVICE_INFO)
            .setBaseName("GPUDeviceInfo")
            .setBaseStructId(StructId.DEVICE_INFO)
            .addDescription("Contains non-status information regarding a GPU device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CacheSize")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("cache_size")
                           .addDescription("Cache size for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CoreCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("core_cnt")
                           .addDescription("Number of cores for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CoreSpeed")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("core_speed")
                           .addDescription("Core speed for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMSize")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_size")
                           .addDescription("Dynamic RAM size")//TODO expressed in what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_type")
                           .addDescription("Dynamic RAM type")
                           .build())
            .build();

    private static final Struct GPUDeviceStatus =
        new Struct.Builder()
            .setStructId(StructId.GPU_DEVICE_STATUS)
            .setBaseName("GPUDeviceStatus")
            .setBaseStructId(StructId.DEVICE_STATUS)
            .addDescription("GPU Device Status Information")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Unique")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("unique")
                           .addDescription("Internal value")
                           .build())
            .build();

    private static final Struct Group =
        new Struct.Builder()
            .setStructId(StructId.GROUP)
            .setBaseName("Group")
            .addDescription("Describes a configured group which contains a free device pool and some number of configured machines.")
            .addDescription("This struct does not contain information regarding the related entities; that information must be obtained via other functions/methods.")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fabr_id")
                           .addDescription("The identifier of the fabric to which this group belongs")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("grp_id")
                           .addDescription("The unique (among the contained fabric) identifier of this group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("group_name")
                           .addDescription("The unique (among the contained fabric) name of this group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PodId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("pod_id")
                           .addDescription("Obsolete - should always be -1")
                           .setIsOptional(true)
                           .setDefaultValue(-1)
                           .build())
            .build();

    private static final Struct GroupComputeDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.GROUP_COMPUTE_DEVICE_RELATOR)
            .setBaseName("GroupComputeDeviceRelator")
            .addDescription("Describes a relation between a group and a compute device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceStatus")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COMPUTE_DEVICE_STATUS))
                           .setJsonTag("deviceStatus")
                           .addDescription("A {struct ComputeDeviceStatus} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Group")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP))
                           .setJsonTag("group")
                           .addDescription("{struct Group} entity for the group in the relation")
                           .build())
            .build();

    private static final Struct GroupDetails =
        new Struct.Builder()
            .setStructId(StructId.GROUP_DETAILS)
            .setBaseName("GroupDetails")
            .addDescription("Contains statistical information which is accumulated for the group.")
            .addDescription("Does not contain relations with devices; that information resides in the various device relators.")
            //  TODO do these stats include things in the related machines, in the group pool, or both?
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("grp_id")
                           .addDescription("System-unique identifier for the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("group_name")
                           .addDescription("System-unique human-readable name of the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CpuFrequency")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.FLOAT))
                           .setJsonTag("cpu-frequency")
                           .addDescription("Frequency of the CPUs in the group")
                           //   TODO what if there are differently-spec'd CPUs in the group?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CpuCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cpu-count")
                           .addDescription("Number of CPUs in the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CpuLanes")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cpu-lanes")
                           .addDescription("Number of PCI lanes dedicated to CPUs for this group")
                           //   TODO total CPU lanes, lanes per CPU, what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CpuCoreCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cpu-core-count")
                           .addDescription("Number of CPU cores in the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TotalDRAM")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("total-dram")
                           .addDescription("Total amount of dynamic RAM in the group")
                           //   TODO expressed as bytes? MBytes? what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("NetworkAdapterCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("network-adapter-count")
                           .addDescription("Number of network adapters in the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TotalThroughput")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("total-throughput")
                           .addDescription("Total throughput for this group")
                           //   TODO throughput of what? NIC traffic? Expressed as bits/per/second or what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("StorageDriveCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("storage-drive-count")
                           .addDescription("Number of SSDs in the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TotalCapacity")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("total-capacity")
                           .addDescription("Total capacity of SSD storage in the group")
                           //   TODO expressed as what? Bytes, Blocks, MBytes, what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GPUCores")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("gpu-cores")
                           .addDescription("Number of GPU cores in the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TotalMachines")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("total-machines")
                           .addDescription("Number of configured machines in the group")
                           .build())
            .build();

    private static final Struct GroupGPUDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.GROUP_GPU_DEVICE_RELATOR)
            .setBaseName("GroupGPUDeviceRelator")
            .addDescription("Describes a relation between a group and an GPU device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceStatus")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GPU_DEVICE_STATUS))
                           .setJsonTag("deviceStatus")
                           .addDescription("{struct GPUDeviceStatus} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Group")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP))
                           .setJsonTag("group")
                           .addDescription("{struct Group} entity for the group in the relation")
                           .build())
            .build();

    private static final Struct GroupFPGADeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.GROUP_FPGA_DEVICE_RELATOR)
            .setBaseName("GroupFPGADeviceRelator")
            .addDescription("Describes a relation between a group and an FPGA device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceStatus")
                           .setDataDescriptor(new StructDataDescriptor(StructId.FPGA_DEVICE_STATUS))
                           .setJsonTag("deviceStatus")
                           .addDescription("{struct FPGADeviceStatus} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Group")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP))
                           .setJsonTag("group")
                           .addDescription("{struct Group} entity for the group in the relation")
                           .build())
            .build();

    private static final Struct GroupMemoryDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.GROUP_MEMORY_DEVICE_RELATOR)
            .setBaseName("GroupMemoryDeviceRelator")
            .addDescription("Describes a relation between a group and a memory device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceStatus")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MEMORY_DEVICE_STATUS))
                           .setJsonTag("deviceStatus")
                           .addDescription("{struct MemoryDeviceStatus} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Group")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP))
                           .setJsonTag("group")
                           .addDescription("{struct Group} entity for the group in the relation")
                           .build())
            .build();

    private static final Struct GroupNetworkDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.GROUP_NETWORK_DEVICE_RELATOR)
            .setBaseName("GroupNetworkDeviceRelator")
            .addDescription("Describes a relation between a group and a network device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceStatus")
                           .setDataDescriptor(new StructDataDescriptor(StructId.NETWORK_DEVICE_STATUS))
                           .setJsonTag("deviceStatus")
                           .addDescription("{struct NetworkDeviceStatus} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Group")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP))
                           .setJsonTag("group")
                           .addDescription("{struct Group} entity for the group in the relation")
                           .build())
            .build();

    private static final Struct GroupPool =
        new Struct.Builder()
            .setStructId(StructId.GROUP_POOL)
            .setBaseName("GroupPool")
            .addDescription("Describes a group pool")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Coordinates")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("coordinates")
                           .addDescription("Liqid coordinates for the switch which controls this group pool")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fabr_id")
                           .addDescription("Fabric identifier for the fabric which contains the group")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("grp_id")
                           .addDescription("Unique identifier of the group")
                           .build())
            .build();

    private static final Struct GroupStorageDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.GROUP_STORAGE_DEVICE_RELATOR)
            .setBaseName("GroupStorageDeviceRelator")
            .addDescription("Describes a relation between a group and a storage device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceStatus")
                           .setDataDescriptor(new StructDataDescriptor(StructId.STORAGE_DEVICE_STATUS))
                           .setJsonTag("deviceStatus")
                           .addDescription("{struct StorageDeviceStatus} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Group")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP))
                           .setJsonTag("group")
                           .addDescription("{struct Group} entity for the group in the relation")
                           .build())
            .build();

    private static final Struct HardwareComponent =
        new Struct.Builder()
            .setStructId(StructId.HARDWARE_COMPONENT)
            .setBaseName("HardwareComponent")
            .addDescription("Describes the hardware details of a component")
            //	There is an entity tagged as "index"... but sometimes it is an int, sometimes it is a string.
            //	Since it is unpredictable, we cannot define it here.
            .addMember(new StructDataMember.Builder()
                           .setBaseName("HardwareType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("type")
                           .addDescription("Hardware type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Hardware name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Flags")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64_AS_STRING))
                           .setJsonTag("flags")
                           .addDescription("Hardware flags displayed as a hex string prefixed by 'ox'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("State")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("state")
                           .addDescription("Hardware state")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fabr_id")
                           .addDescription("Fabric identifier of the fabric to which this entity is connected.")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("fabr_gid")
                           .addDescription("Fabric-unique global identifier to which this entity is connected.")
                           //   TODO is this description correct?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SwitchGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT24_AS_STRING))
                           .setJsonTag("swit_gid")
                           .addDescription("TODO")
                           //   TODO what is this? and while we're at it, what is the previous one?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIVendorId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT16_AS_STRING))
                           .setJsonTag("vid")
                           .addDescription("Unique Vendor identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIDeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT16_AS_STRING))
                           .setJsonTag("did")
                           .addDescription("Vendor-unique device identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Revision")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("rev")
                           .addDescription("Hardware revision string")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("port_cnt")
                           .addDescription("Number of ports for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Ports")
                           .setDataDescriptor(new StructDataDescriptor(StructId.PORT, true))
                           .setJsonTag("ports")
                           .addDescription("Descriptions of the component ports")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCILaneCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("lanes")
                           .addDescription("Number of PCI lanes for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ReceiverErrorCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("rcv_errs")
                           .addDescription("Running count of errors received for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BadTLPCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("bad_tlp")
                           .addDescription("Running count of bad TLPs for this component")
                           //   TODO what is a TLP?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BadDLLPCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("bad_dllp")
                           .addDescription("Running count of bad DLLPs for this component")
                           //   TODO what is a TLP?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ErrorCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("errs")
                           .addDescription("Running count of all errors for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("IngressBytes")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("ibytes")
                           .addDescription("Running count of incoming bytes")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("EgressBytes")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("ebytes")
                           .addDescription("Running count of outgoing bytes")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Location")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("location")
                           .addDescription("Liqid coordinates for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Owner")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("owner")
                           .addDescription("Liqid coordinates for the component directly above this in the containing fabric topology")
                           .build())
            .addImportRequirement(LanguageId.JAVA, "java.util.LinkedList")
            .build();

    private static final Struct Machine =
        new Struct.Builder()
            .setStructId(StructId.MACHINE)
            .setBaseName("Machine")
            .addDescription("Describes a configured machine")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Index")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("index")
                           .addDescription("Internal value")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("MachineId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("mach_id")
                           .addDescription("Unique identifier for this particular machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("grp_id")
                           .addDescription("Unique identifier of the group to which this machine belongs")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fabr_id")
                           .addDescription("Unique identifier of the fabric to which this machine belongs")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING)
                                                  .appendTranslation("\"n/a\"", "0"))
                           .setJsonTag("fabr_gid")
                           .addDescription("Fabric global identifier expressed in hexadecimal")
                           //   TODO better description needed
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT24_AS_STRING))
                           .setJsonTag("port_gid")
                           .addDescription("Port global identifier expressed in hexadecimal")
                           //   TODO better description needed
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SwitchGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT24_AS_STRING))
                           .setJsonTag("swit_gid")
                           .addDescription("Switch global identifier expressed in hexadecimal")
                           //   TODO better description needed
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ComputeName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("comp_name")
                           .addDescription("Name of the compute device associated with this machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("MachineName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("mach_name")
                           .addDescription("Name of this machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("P2PEnabled")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.P2P_TYPE))
                           .setDefaultValue("off")
                           .setJsonTag("p2p")
                           .addDescription("Name of this machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CreatedTimestamp")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("mtime")
                           .addDescription("Date and time that this machine was created")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ConnectionHistory")
                           .setDataDescriptor(new StructDataDescriptor(StructId.CONNECTION_HISTORY, true))
                           .setJsonTag("connection_history")
                           .addDescription("Connection history for this machine")
                           .addDescription("Expressed as an array of {struct ConnectionHistory} entities")
                           .build())
            .addImportRequirement(LanguageId.JAVA, "java.util.LinkedList")
            .build();

    private static final Struct MachineComputeDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.MACHINE_COMPUTE_DEVICE_RELATOR)
            .setBaseName("MachineComputeDeviceRelator")
            .addDescription("Describes a relation between a machine and a compute device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupDeviceRelator")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP_COMPUTE_DEVICE_RELATOR))
                           .setJsonTag("groupDeviceRelator")
                           .addDescription("A {struct GroupComputeDeviceRelator} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Machine")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MACHINE))
                           .setJsonTag("machine")
                           .addDescription("{struct Machine} entity for the machine in the relation")
                           .build())
            .build();

    private static final Struct MachineFPGADeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.MACHINE_FPGA_DEVICE_RELATOR)
            .setBaseName("MachineFPGADeviceRelator")
            .addDescription("Describes a relation between a machine and a FPGA device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupDeviceRelator")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP_FPGA_DEVICE_RELATOR))
                           .setJsonTag("groupDeviceRelator")
                           .addDescription("A {struct GroupFPGADeviceRelator} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Machine")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MACHINE))
                           .setJsonTag("machine")
                           .addDescription("{struct Machine} entity for the machine in the relation")
                           .build())
            .build();

    private static final Struct MachineGPUDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.MACHINE_GPU_DEVICE_RELATOR)
            .setBaseName("MachineGPUDeviceRelator")
            .addDescription("Describes a relation between a machine and a GPU device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupDeviceRelator")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP_GPU_DEVICE_RELATOR))
                           .setJsonTag("groupDeviceRelator")
                           .addDescription("A {struct GroupGPUDeviceRelator} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Machine")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MACHINE))
                           .setJsonTag("machine")
                           .addDescription("{struct Machine} entity for the machine in the relation")
                           .build())
            .build();

    private static final Struct MachineMemoryDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.MACHINE_MEMORY_DEVICE_RELATOR)
            .setBaseName("MachineMemoryDeviceRelator")
            .addDescription("Describes a relation between a machine and a memory device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupDeviceRelator")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP_MEMORY_DEVICE_RELATOR))
                           .setJsonTag("groupDeviceRelator")
                           .addDescription("A {struct GroupMemoryDeviceRelator} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Machine")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MACHINE))
                           .setJsonTag("machine")
                           .addDescription("{struct Machine} entity for the machine in the relation")
                           .build())
            .build();

    private static final Struct MachineNetworkDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.MACHINE_NETWORK_DEVICE_RELATOR)
            .setBaseName("MachineNetworkDeviceRelator")
            .addDescription("Describes a relation between a machine and a network device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupDeviceRelator")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP_NETWORK_DEVICE_RELATOR))
                           .setJsonTag("groupDeviceRelator")
                           .addDescription("A {struct GroupNetworkDeviceRelator} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Machine")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MACHINE))
                           .setJsonTag("machine")
                           .addDescription("{struct Machine} entity for the machine in the relation")
                           .build())
            .build();

    private static final Struct MachineStorageDeviceRelator =
        new Struct.Builder()
            .setStructId(StructId.MACHINE_STORAGE_DEVICE_RELATOR)
            .setBaseName("MachineStorageDeviceRelator")
            .addDescription("Describes a relation between a machine and a storage device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupDeviceRelator")
                           .setDataDescriptor(new StructDataDescriptor(StructId.GROUP_STORAGE_DEVICE_RELATOR))
                           .setJsonTag("groupDeviceRelator")
                           .addDescription("A {struct GroupStorageDeviceRelator} entity for the device in the relation")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Machine")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MACHINE))
                           .setJsonTag("machine")
                           .addDescription("{struct Machine} entity for the machine in the relation")
                           .build())
            .build();

    private static final Struct MachineDetails =
        new Struct.Builder()
            .setStructId(StructId.MACHINE_DETAILS)
            .setBaseName("MachineDetails")
            .addDescription("Additional details for a particular machine")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPUSocketsField")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("cpuSocketsField")
                           .addDescription("TODO")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("MachineId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("mach_id")
                           .addDescription("Unique machine identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("MachineName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("mach_name")
                           .addDescription("Machine name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPUThreadCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cpu-threads")
                           .addDescription("Number of CPU threads for the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPUFrequency")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("cpu-frequency")
                           .addDescription("Cycle frequency for the CPU in this machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPUCoreCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cpu-cores")
                           .addDescription("Number of CPU cores for the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPUSockets")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("cpu-sockets")
                           .addDescription("Describes the CPU sockets for this machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DynamicRAM")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram-memory")
                           .addDescription("Describes the dynamic RAM for this machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricConnect")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("fabric-connect")
                           .addDescription("TODO")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("NetworkAdapterCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("network-adapter-count")
                           .addDescription("Number of network adapters in the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TotalThroughput")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("total-throughput")
                           .addDescription("TODO")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("StorageDriveCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("storage-drive-count")
                           .addDescription("Number of storage drives in the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TotalCapacity")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("total-capacity")
                           .addDescription("Total capacity in this machine")//TODO expressed as? of storage?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GPUCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("gpu-count")
                           .addDescription("Number of GPUs connected to the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GPUCoreCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("gpu-cores")
                           .addDescription("Number of GPU cores for the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("OperatingSystem")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("os_name")
                           .addDescription("Operating system name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BootImage")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("boot_image")
                           .addDescription("Description of the boot image")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BootDevice")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("boot_device")
                           .addDescription("Boot device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("IPAddress")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("ip_address")
                           .addDescription("IP Address (or DNS name) of the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("IPMIAddress")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("ipmi_address")
                           .addDescription("IP Address (or DNS name) of the IPMI management port for the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FPGACount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fpga-count")
                           .addDescription("Number of FPGAs connected to the machine")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FPGASpeed")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("fpga-speed")
                           .addDescription("FPGA speed")//TODO in MHz? or what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FPGADRAMSize")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fpga-dram-size")
                           .addDescription("FPGA dynamic RAM size")//TODO expressed in what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CreatedAt")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("created")
                           .addDescription("Timestamp for when the machine was created")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("LastModifiedAt")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("modified")
                           .addDescription("Timestamp for when the machine was last modified")
                           .build())
            .build();

    private static final Struct MemoryDeviceInfo =
        new Struct.Builder()
            .setStructId(StructId.MEMORY_DEVICE_INFO)
            .setBaseName("MemoryDeviceInfo")
            .setBaseStructId(StructId.DEVICE_INFO)
            .addDescription("Contains non-status information regarding a memory device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Capacity")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("capacity")
                           .addDescription("Capacity of the memory device")
                           .build())
            .build();

    private static final Struct MemoryDeviceStatus =
        new Struct.Builder()
            .setStructId(StructId.MEMORY_DEVICE_STATUS)
            .setBaseName("MemoryDeviceStatus")
            .setBaseStructId(StructId.DEVICE_STATUS)
            .addDescription("Memory Device Status Information")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CapacityMB")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("capacity(MB)")
                           .addDescription("Capacity of the device expressed in MB")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Unique")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("unique")
                           .addDescription("Internal value")
                           .build())
            .build();

    private static final Struct NameValuePair =
        new Struct.Builder()
            .setStructId(StructId.NAME_VALUE_PAIR)
            .setBaseName("NameValuePair")
            .addDescription("A simple tuple tying a value key or name to a value")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("The key or name associated with a value")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ValueString")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("valueString")
                           .addDescription("The value associated with the given key or name")
                           .build())
            .build();

    private static final Struct NetworkManagedCPU =
        new Struct.Builder()
            .setStructId(StructId.NETWORK_MANAGED_CPU)
            .setBaseName("NetworkManagedCPU")
            .addDescription("Describes the access information required to manage a CPU device (e.g., via IPMI)")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Credentials")
                           .setDataDescriptor(new StructDataDescriptor(StructId.CREDENTIALS))
                           .setJsonTag("credentials")
                           .addDescription("Credentials necessary for managing the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("IPAddress")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("ip_address")
                           .addDescription("IP Address or DNS host name of the manager for the managed device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortNumber")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("port")
                           .addDescription("Port number for managing the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ManagerType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.MANAGEABLE_TYPE))
                           .setJsonTag("type")
                           .addDescription("Entity management type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPUName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("cpu_name")
                           .addDescription("CPU name")
                           .build())
            .build();

    private static final Struct NetworkManagedEnclosure =
        new Struct.Builder()
            .setStructId(StructId.NETWORK_MANAGED_ENCLOSURE)
            .setBaseName("NetworkManagedEnclosure")
            .addDescription("Describes the access information required to manage an enclosure")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Credentials")
                           .setDataDescriptor(new StructDataDescriptor(StructId.CREDENTIALS))
                           .setJsonTag("credentials")
                           .addDescription("Credentials necessary for managing the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("IPAddress")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("ip_address")
                           .addDescription("IP Address or DNS host name of the manager for the managed device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortNumber")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("port")
                           .addDescription("Port number for managing the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ManagerType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.MANAGEABLE_TYPE))
                           .setJsonTag("type")
                           .addDescription("Entity management type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("EnclosureName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("enclosure_name")
                           .addDescription("Enclosure name")
                           .build())
            .build();

    private static final Struct ManagedEntity =
        new Struct.Builder()
            .setStructId(StructId.MANAGED_ENTITY)
            .setBaseName("ManagedEntity")
            .addDescription("Describes information regarding a particular vendor and model of a manageable device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("device_type")
                           .addDescription("Type of the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Description")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("description")
                           .addDescription("Name of the managed entity")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIVendorId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("vid")
                           .addDescription("Unique identity of the PCI vendor")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCIDeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("did")
                           .addDescription("Vendor-unique identity of the PCI device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Model")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("model")
                           .addDescription("Describes the model of the device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("NumberOfCores")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cores")
                           .addDescription("Number of cores for CPU entities")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("NumberOfThreads")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("threads")
                           .addDescription("Number of threads for CPU entities")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Speed")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("speed")
                           .addDescription("Cycle speed of the entity")//TODO expressed as what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Capacity")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("capacity")
                           .addDescription("Capacity of the entity")//TODO of what? expressed as what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SRIOVEnabled")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                           .setJsonTag("sriov")
                           .addDescription("Indicates whether Single-Root IO Virtualization (SRIOV) is enabled for this entity")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ManagedEntityType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))//TODO should this be an enum?
                           .setJsonTag("type")
                           .addDescription("Indicates the type of this managed entity")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Unique")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("unique")
                           .addDescription("TODO")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CoreMHZ")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("core_mhz")
                           .addDescription("Cycle speed of cpu entity")//TODO how is this different from speed (above)?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMSize")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("dram_size")
                           .addDescription("Size of Dynamic RAM")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_type")
                           .addDescription("Type of Dynamic RAM")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Manufacturer")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("device_manufacturer")
                           .addDescription("Manufacturer/vendor name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DiscoveryToken")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("discovery_token")
                           .addDescription("A portion of the PCI device identification string which can be used to determine device type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CompanionDevice")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("companion_device")
                           .addDescription("Known values are 'no' and 'multi'")//TODO improve this
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("EntryDescription")
                           .setDataDescriptor(new StructDataDescriptor(StructId.MANAGED_ENTITY_STATE))
                           .setJsonTag("entry_description")
                           .addDescription("Describes the multi-variate state of this entry")
                           .build())
            .build();

    private static final Struct ManagedEntityState =
        new Struct.Builder()
            .setStructId(StructId.MANAGED_ENTITY_STATE)
            .setBaseName("ManagedEntityState")
            .addDescription("Describes the state of a managed entity entry")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Active")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                           .setJsonTag("active")
                           .addDescription("Indicates whether the entity entry is active")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Required")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                           .setJsonTag("required")
                           .addDescription("Indicates whether the entity entry is required")
                           .build())
            .build();

    private static final Struct NetworkDeviceInfo =
        new Struct.Builder()
            .setStructId(StructId.NETWORK_DEVICE_INFO)
            .setBaseName("NetworkDeviceInfo")
            .setBaseStructId(StructId.DEVICE_INFO)
            .addDescription("Contains non-status information regarding a network device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("LinkSpeed")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("link_speed")
                           .addDescription("Speed/bandwidth of the network link")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMSize")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_sz")
                           .addDescription("Dynamic RAM size")//TODO expressed as what?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DRAMType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("dram_type")
                           .addDescription("Dynamic RAM type")//TODO elaborate?
                           .build())
            .build();

    private static final Struct NetworkDeviceStatus =
        new Struct.Builder()
            .setStructId(StructId.NETWORK_DEVICE_STATUS)
            .setBaseName("NetworkDeviceStatus")
            .setBaseStructId(StructId.DEVICE_STATUS)
            .addDescription("Network Device Status Information")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Unique")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("unique")
                           .addDescription("Internal value")
                           .build())
            .build();

    private static final Struct NodeStatus =
        new Struct.Builder()
            .setStructId(StructId.NODE_STATUS)
            .setBaseName("NodeStatus")
            .addDescription("Status information regarding one particular node.")
            .addDescription("A node should be thought of as a unique host or CPU.")
            .addDescription("The use of the word 'node' does not imply any association with a clustered system.")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ConfigVersion")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cfg_vers")
                           .addDescription("Configuration version")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ConfigIdentifier")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("cid")
                           .addDescription("Configuration identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Comps")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("comps")
                           .addDescription("TODO")//TODO I cannot even guess what this is
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CurrentTime")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("currtime")
                           .addDescription("Current time setting of the node")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fabr_id")
                           .addDescription("Identifier of the containing fabric")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Flags")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64_AS_STRING))
                           .setJsonTag("flags")
                           .addDescription("Flag settings expressed as a hex value prefixed by '0x'")
                           //   TODO except that in my test, I get "management" - what the pig?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("LinkCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("links")
                           .addDescription("Number of links for this node")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Location")
                           .setDataDescriptor(new StructDataDescriptor(StructId.COORDINATES))
                           .setJsonTag("location")
                           .addDescription("Liqid coordinates of this node")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("OperatingSystem")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.OPERATING_SYSTEM_TYPE))
                           .setJsonTag("os_type")
                           .addDescription("Operating system which is running on the node")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("RunState")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.RUN_TYPE))
                           .setJsonTag("run")
                           .addDescription("Current running state of the node")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SoftwareVersion")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("sw_vers")
                           .addDescription("Software version for the node")//TODO or is it switch version?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("TargetCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("targs")
                           .addDescription("Number of targets")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("UpTime")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("uptime")
                           .addDescription("Amount of time the system has been up")
                           .build())
            .build();

    private static final Struct Port =
        new Struct.Builder()
            .setStructId(StructId.PORT)
            .setBaseName("Port")
            .addDescription("Describes a switch port")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("type")
                           .addDescription("Hardware type")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Index")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("index")
                           .addDescription("Internal index of this port")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Flags")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64_AS_STRING))
                           .setJsonTag("flags")
                           .addDescription("Hardware flags displayed as a hex string prefixed by 'ox'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("State")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("state")
                           .addDescription("Hardware state")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("fabr_gid")
                           .addDescription("Fabric-unique global identifier to which this entity is connected.")
                           //   TODO is this description correct?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCILaneCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("lanes")
                           .addDescription("Number of PCI lanes for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ReceiverErrorCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("rcv_errs")
                           .addDescription("Running count of errors received for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BadTLPCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("bad_tlp")
                           .addDescription("Running count of bad TLPs for this component")
                           //   TODO what is a TLP?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BadDLLPCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("bad_dllp")
                           .addDescription("Running count of bad DLLPs for this component")
                           //   TODO what is a TLP?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ErrorCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("errs")
                           .addDescription("Running count of all errors for this component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("IngressBytes")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("ibytes")
                           .addDescription("Running count of incoming bytes")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("EgressBytes")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("ebytes")
                           .addDescription("Running count of outgoing bytes")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Switches")
                           .setDataDescriptor(new StructDataDescriptor(StructId.SWITCH, true))
                           .setJsonTag("switches")
                           .addDescription("Array of {struct Switch} objects describing the switches which are connected to this port")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CPU")
                           .setDataDescriptor(new StructDataDescriptor(StructId.PORT_CPU))
                           .setJsonTag("cpu")
                           .addDescription("A {struct PortCPU} struct describing the CPU which is connected to this port")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceState")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("device_state")
                           .addDescription("Describes this entity's current state")
                           .build())
            .addImportRequirement(LanguageId.JAVA, "java.util.LinkedList")
            .build();

    private static final Struct PortCPU =
        new Struct.Builder()
            .setStructId(StructId.PORT_CPU)
            .setBaseName("PortCPU")
            .addDescription("Describes a CPU switch port")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Name of this entity")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("gid")
                           .addDescription("Global identifier for this entity")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("VendorId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("vendorid")
                           .addDescription("Unique identifier of the hardware vendor expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("deviceid")
                           .addDescription("Vendor-unique identifier of the device expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BusWidth")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("buswidth")
                           .addDescription("Bus-width for the switch")
                           //   TODO number of lanes? bandwidth? What?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Direction")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("direction")
                           .addDescription("TODO")
                           //   TODO fix the description - should this be an enumerator? check swagger
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("type")
                           .addDescription("TODO")
                           //   TODO what is this? should it be an enumerator?
                           .build())
            .build();

    private static final Struct PreDevice =
        new Struct.Builder()
            .setStructId(StructId.PRE_DEVICE)
            .setBaseName("PreDevice")
            .addDescription("Describes a device before it is added to a group")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PreDeviceType")
                           .setDataDescriptor(new EnumeratorDataDescriptor(EnumeratorId.PRE_DEVICE_TYPE))
                           .setJsonTag("dev_type")
                           .addDescription("Pre Device type (not exactly the same as the Device Status device type)")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("fabr_gid")
                           .addDescription("Fabric global id")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("FabricId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("fabr_id")
                           .addDescription("Fabric identifier to which the device belongs")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Flags")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64_AS_STRING))
                           .setJsonTag("flags")
                           .addDescription("Flags for the device - a hex string prefixed by '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("gname")
                           .addDescription("TODO")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("grp_id")
                           .addDescription("TODO")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Index")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("index")
                           .addDescription("Internal index for this pre-device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PCILaneCount")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("lanes")
                           .addDescription("Number of PCI lanes for this device")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("MachineId")
                           .setDataDescriptor((new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_DECIMAL_STRING))
                                                  .appendTranslation("\"n/a\"", "0"))
                           .setJsonTag("mach_id")
                           .addDescription("Machine identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("MachineName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("mname")
                           .addDescription("Machine name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceName")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Device name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("OwnerId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32_AS_STRING))
                           .setJsonTag("owner_id")
                           .addDescription("Owner identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PodId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .setJsonTag("pod_id")
                           .addDescription("Obsolete value - should always be -1")
                           .setIsOptional(true)
                           .setDefaultValue(-1)
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("PortGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT24_AS_STRING))
                           .setJsonTag("port_gid")
                           .addDescription("Device port global identifier")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SwitchGlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT24_AS_STRING))
                           .setJsonTag("swit_gid")
                           .addDescription("Device switch global identifier")
                           .build())
            .build();

    private static final Struct SSHStatus =
        new Struct.Builder()
            .setStructId(StructId.SSH_STATUS)
            .setBaseName("SSHStatus")
            .addDescription("Describes the current state of SSH")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Active")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                           .setJsonTag("is-active")
                           .addDescription("Indicates whether SSH is active")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Enabled")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.BOOLEAN))
                           .setJsonTag("is-enabled")
                           .addDescription("Indicates whether SSH is enabled")
                           .build())
            .build();

    private static final Struct StorageDeviceInfo =
        new Struct.Builder()
            .setStructId(StructId.STORAGE_DEVICE_INFO)
            .setBaseName("StorageDeviceInfo")
            .setBaseStructId(StructId.DEVICE_INFO)
            .addDescription("Contains non-status information regarding a storage device")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Capacity")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("capacity")
                           .addDescription("Capacity of the storage device")
                           .build())
            .build();

    private static final Struct StorageDeviceStatus =
        new Struct.Builder()
            .setStructId(StructId.STORAGE_DEVICE_STATUS)
            .setBaseName("StorageDeviceStatus")
            .setBaseStructId(StructId.DEVICE_STATUS)
            .addDescription("Storage Device Status Information")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("CapacityMB")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .setJsonTag("capacity(MB)")
                           .addDescription("Capacity of the device expressed in MB")
                           .build())
            .build();

    private static final Struct Switch =
        new Struct.Builder()
            .setStructId(StructId.SWITCH)
            .setBaseName("Switch")
            .addDescription("Details related to the PCI switch")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Switch name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GlobalId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("gid")
                           .addDescription("Global identifier expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("VendorId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("vendorid")
                           .addDescription("Unique identifier of the hardware vendor expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("deviceid")
                           .addDescription("Vendor-unique identifier of the device expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BusWidth")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("buswidth")
                           .addDescription("Bus-width for the switch")
                           //   TODO number of lanes? bandwidth? What?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Direction")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("direction")
                           .addDescription("TODO")
                           //   TODO fix the description - should this be an enumerator? check swagger
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SwitchType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("type")
                           .addDescription("TODO")
                           //   TODO what is this? should it be an enumerator?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SwitchDevice")
                           .setDataDescriptor(new StructDataDescriptor(StructId.SWITCH_DEVICE))
                           .setJsonTag("device")
                           .addDescription("Additional details regarding the switch")
                           .build())
            .build();

    private static final Struct SwitchDevice =
        new Struct.Builder()
            .setStructId(StructId.SWITCH_DEVICE)
            .setBaseName("SwitchDevice")
            .addDescription("Additional details specific to the switch")
            //  TODO how does this information differ from the containing Switch struct?
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Name")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("name")
                           .addDescription("Switch name")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("GroupId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("gid")
                           .addDescription("Unique identifier of the group expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("VendorId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("vendorid")
                           .addDescription("Unique identifier of the hardware vendor expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("DeviceId")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("deviceid")
                           .addDescription("Vendor-unique identifier of the device expressed as a hex value prefixed with '0x'")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("BusWidth")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("buswidth")
                           .addDescription("Bus-width for the switch")
                           //   TODO number of lanes? bandwidth? What?
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Direction")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("direction")
                           .addDescription("TODO")
                           //   TODO fix the description - should this be an enumerator? check swagger
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("SwitchDeviceType")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("type")
                           .addDescription("TODO")
                           //   TODO what is this? should it be an enumerator?
                           .build())
            .build();

    private static final Struct Timestamp =
        new Struct.Builder()
            .setStructId(StructId.TIMESTAMP)
            .setBaseName("Timestamp")
            .addDescription("Contains a timestamp value")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("OldTimestamp")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT32))
                           .addDescription("Old value with wrong size int and incorrectly-named JSON tag of 'epoch'")
                           .setJsonTag("epoch")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Timestamp")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.INT64))
                           .addDescription("A time and date based on the Unix epoch")
                           .setJsonTag("timestamp")
                           .build())
            .build();

    private static final Struct VersionInfo =
        new Struct.Builder()
            .setStructId(StructId.VERSION_INFO)
            .setBaseName("VersionInfo")
            .addDescription("Describes the versions of the various software components which comprise the Director")
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Branch")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("branch")
                           .addDescription("Development branch from which this component was built")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ChangeSet")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("changeset")
                           .addDescription("")//TODO
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ShortChangeSet")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("changeset_short")
                           .addDescription("")//TODO
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Component")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("component")
                           .addDescription("Name of the software component")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Date")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("date")
                           .addDescription("Date the component was built")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("ShortDate")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("date_short")
                           .addDescription("Date the component was built")
                           .build())
            .addMember(new StructDataMember.Builder()
                           .setBaseName("Version")
                           .setDataDescriptor(new IntrinsicDataDescriptor(IntrinsicTypeId.STRING))
                           .setJsonTag("version")
                           .addDescription("Component version string")
                           .build())
            .build();

    //  ------------------------------------------------------------------------

    public static final Map<StructId, Struct> CONTENT = new LinkedHashMap<>();
    static {
        CONTENT.put(StructId.ASYNCHRONOUS_INFO, AsynchronousInfo);
        CONTENT.put(StructId.ASYNCHRONOUS_STATUS, AsynchronousStatus);
        CONTENT.put(StructId.AVAILABLE_COORDINATES, AvailableCoordinates);
        CONTENT.put(StructId.BACKUP_RESULT, BackupResult);
        CONTENT.put(StructId.COORDINATES, Coordinates);
        CONTENT.put(StructId.COMPUTE_DEVICE_INFO, ComputeDeviceInfo);
        CONTENT.put(StructId.COMPUTE_DEVICE_STATUS, ComputeDeviceStatus);
        CONTENT.put(StructId.CONNECTION_HISTORY, ConnectionHistory);
        CONTENT.put(StructId.CREDENTIALS, Credentials);
        CONTENT.put(StructId.DEVICE_COUNTERS, DeviceCounters);
        CONTENT.put(StructId.DEVICE_INFO, DeviceInfo);
        CONTENT.put(StructId.DEVICE_STATUS, DeviceStatus);
        CONTENT.put(StructId.DEVICE_TYPE_AND_ATTRIBUTES, DeviceTypeAndAttributes);
        CONTENT.put(StructId.DEVICE_USER_DESCRIPTION, DeviceUserDescription);
        CONTENT.put(StructId.DIGEST_INFO, DigestInfo);
        CONTENT.put(StructId.DISCOVERY_TOKEN, DiscoveryToken);
        CONTENT.put(StructId.FABRIC_ITEM, FabricItem);
        CONTENT.put(StructId.FABRIC_TOGGLE_COMPOSITE, FabricToggleComposite);
        CONTENT.put(StructId.FPGA_DEVICE_INFO, FPGADeviceInfo);
        CONTENT.put(StructId.FPGA_DEVICE_STATUS, FPGADeviceStatus);
        CONTENT.put(StructId.GPU_DEVICE_INFO, GPUDeviceInfo);
        CONTENT.put(StructId.GPU_DEVICE_STATUS, GPUDeviceStatus);
        CONTENT.put(StructId.GROUP, Group);
        CONTENT.put(StructId.GROUP_COMPUTE_DEVICE_RELATOR, GroupComputeDeviceRelator);
        CONTENT.put(StructId.GROUP_DETAILS, GroupDetails);
        CONTENT.put(StructId.GROUP_FPGA_DEVICE_RELATOR, GroupFPGADeviceRelator);
        CONTENT.put(StructId.GROUP_GPU_DEVICE_RELATOR, GroupGPUDeviceRelator);
        CONTENT.put(StructId.GROUP_POOL, GroupPool);
        CONTENT.put(StructId.GROUP_MEMORY_DEVICE_RELATOR, GroupMemoryDeviceRelator);
        CONTENT.put(StructId.GROUP_NETWORK_DEVICE_RELATOR, GroupNetworkDeviceRelator);
        CONTENT.put(StructId.GROUP_STORAGE_DEVICE_RELATOR, GroupStorageDeviceRelator);
        CONTENT.put(StructId.HARDWARE_COMPONENT, HardwareComponent);
        CONTENT.put(StructId.LIQID_CLIENT_BASE, LiqidClientBase);
        CONTENT.put(StructId.LIQID_CLIENT, LiqidClient);
        CONTENT.put(StructId.LIQID_EXCEPTION, LiqidException);
        CONTENT.put(StructId.MACHINE, Machine);
        CONTENT.put(StructId.MACHINE_COMPUTE_DEVICE_RELATOR, MachineComputeDeviceRelator);
        CONTENT.put(StructId.MACHINE_DETAILS, MachineDetails);
        CONTENT.put(StructId.MACHINE_FPGA_DEVICE_RELATOR, MachineFPGADeviceRelator);
        CONTENT.put(StructId.MACHINE_GPU_DEVICE_RELATOR, MachineGPUDeviceRelator);
        CONTENT.put(StructId.MACHINE_MEMORY_DEVICE_RELATOR, MachineMemoryDeviceRelator);
        CONTENT.put(StructId.MACHINE_NETWORK_DEVICE_RELATOR, MachineNetworkDeviceRelator);
        CONTENT.put(StructId.MACHINE_STORAGE_DEVICE_RELATOR, MachineStorageDeviceRelator);
        CONTENT.put(StructId.MANAGED_ENTITY, ManagedEntity);
        CONTENT.put(StructId.MANAGED_ENTITY_STATE, ManagedEntityState);
        CONTENT.put(StructId.MEMORY_DEVICE_INFO, MemoryDeviceInfo);
        CONTENT.put(StructId.MEMORY_DEVICE_STATUS, MemoryDeviceStatus);
        CONTENT.put(StructId.NAME_VALUE_PAIR, NameValuePair);
        CONTENT.put(StructId.NETWORK_DEVICE_INFO, NetworkDeviceInfo);
        CONTENT.put(StructId.NETWORK_DEVICE_STATUS, NetworkDeviceStatus);
        CONTENT.put(StructId.NETWORK_MANAGED_CPU, NetworkManagedCPU);
        CONTENT.put(StructId.NETWORK_MANAGED_ENCLOSURE, NetworkManagedEnclosure);
        CONTENT.put(StructId.NODE_STATUS, NodeStatus);
        CONTENT.put(StructId.PORT, Port);
        CONTENT.put(StructId.PORT_CPU, PortCPU);
        CONTENT.put(StructId.PRE_DEVICE, PreDevice);
        CONTENT.put(StructId.SSH_STATUS, SSHStatus);
        CONTENT.put(StructId.STORAGE_DEVICE_INFO, StorageDeviceInfo);
        CONTENT.put(StructId.STORAGE_DEVICE_STATUS, StorageDeviceStatus);
        CONTENT.put(StructId.SWITCH, Switch);
        CONTENT.put(StructId.SWITCH_DEVICE, SwitchDevice);
        CONTENT.put(StructId.TIMESTAMP, Timestamp);
        CONTENT.put(StructId.VERSION_INFO, VersionInfo);
    }
}
